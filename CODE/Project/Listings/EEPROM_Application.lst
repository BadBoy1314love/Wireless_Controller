C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE EEPROM_APPLICATION
OBJECT MODULE PLACED IN ..\Output\EEPROM_Application.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE ..\Source\Application\EEPROM_Application.c OPTIMIZE(9,SPEED) BROWSE INCDIR(
                    -..\Source\Application;..\Source\Device_Driver;..\Source\System;D:\Keil\C51\INC\STC) DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -EEPROM_Application.lst) TABS(2) OBJECT(..\Output\EEPROM_Application.obj)

line level    source

   1          #include "Config.h"
   2          #include "EEPROM.h"
   3          #include "EEPROM_Application.h"
   4          #include "ESP8266.h"
   5          
   6          
   7          u16 xdata EepromSta = 0;
   8          u16 xdata EepromAp = 0;
   9          
  10          //默认无线信息
  11          u8 code ATCIPSERVER_Default[]="AT+CIPSERVER=1,00001\r\n";
  12          u8 code STA_MODE_Table_Default[]="AT+CWJAP_CUR=\"TP-LINK_847A\",\"asdfghjkl\"\r\n        ";
  13          u8 code AP_MODE_Table_Default[]="AT+CWSAP_CUR=\"Wireless_Controller\",\"asdfghjkl\",3,4\r\n       ";
  14          
  15          /*时间区间间歇模式*/
  16          
  17          //对所有任务
  18          extern bdata u8 Task_OverTime_Reset;
  19          
  20          /*任务一*/
  21          extern s16 xdata Task1_StartTime;//任务1起始运行时间
  22          extern s16 xdata Task1_EndTime;//任务1结束运行时间
  23          extern s32 xdata Task1_OverTime; //任务1运行超时时间
  24          //extern bit Task1_OverTime_Reset; //任务1运行超时自动复位控制位
  25                                        //用于控制任务是否永久运行
  26                                        //1:自动复位 ，任务超时将复位超时计数，任务永久运行
  27                                        //0:不自动复位 任务超时将关闭
  28          
  29          extern s32 xdata Task1_OnTime;  //表示Task1输出ON状态的时间
  30          extern s32 xdata Task1_OffTime; //表示Task1输出OFF状态的时间
  31          
  32          /*任务二*/
  33          extern s16 xdata Task2_StartTime;//任务2起始运行时间
  34          extern s16 xdata Task2_EndTime;//任务2结束运行时间
  35          extern s32 xdata Task2_OverTime; //任务2运行超时时间
  36          //extern bit Task2_OverTime_Reset; //任务2运行超时自动复位控制位
  37                                        //用于控制任务是否永久运行
  38                                        //1:自动复位 ，任务超时将复位超时计数，任务永久运行
  39                                        //0:不自动复位 任务超时将关闭
  40          
  41          extern s32 xdata Task2_OnTime;  //表示Task2输出ON状态的时间
  42          extern s32 xdata Task2_OffTime; //表示Task2输出OFF状态的时间
  43          
  44          
  45          /*任务三*/
  46          extern s16 xdata Task3_StartTime;//任务3起始运行时间
  47          extern s16 xdata Task3_EndTime;//任务3结束运行时间
  48          extern s32 xdata Task3_OverTime; //任务3运行超时时间
  49          //extern bit Task3_OverTime_Reset; //任务3运行超时自动复位控制位
  50                                        //用于控制任务是否永久运行
  51                                        //1:自动复位 ，任务超时将复位超时计数，任务永久运行
  52                                        //0:不自动复位 任务超时将关闭
  53          
C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 2   

  54          extern s32 xdata Task3_OnTime;  //表示Task3输出ON状态的时间
  55          extern s32 xdata Task3_OffTime; //表示Task3输出OFF状态的时间
  56          
  57          
  58          /*任务四*/
  59          extern s16 xdata Task4_StartTime;//任务4起始运行时间
  60          extern s16 xdata Task4_EndTime;//任务4结束运行时间
  61          extern s32 xdata Task4_OverTime; //任务4运行超时时间
  62          //extern bit Task4_OverTime_Reset; //任务4运行超时自动复位控制位
  63                                        //用于控制任务是否永久运行
  64                                        //1:自动复位 ，任务超时将复位超时计数，任务永久运行
  65                                        //0:不自动复位 任务超时将关闭
  66          
  67          extern s32 xdata Task4_OnTime;  //表示Task4输出ON状态的时间
  68          extern s32 xdata Task4_OffTime; //表示Task4输出OFF状态的时间
  69          
  70          /*任务五*/
  71          extern s16 xdata Task5_StartTime;//任务5起始运行时间
  72          extern s16 xdata Task5_EndTime;//任务5结束运行时间
  73          extern s32 xdata Task5_OverTime; //任务5运行超时时间
  74          //extern bit Task5_OverTime_Reset; //任务5运行超时自动复位控制位
  75                                        //用于控制任务是否永久运行
  76                                        //1:自动复位 ，任务超时将复位超时计数，任务永久运行
  77                                        //0:不自动复位 任务超时将关闭
  78          
  79          extern s32 xdata Task5_OnTime;  //表示Task5输出ON状态的时间
  80          extern s32 xdata Task5_OffTime; //表示Task5输出OFF状态的时间
  81          
  82          /*任务六*/
  83          extern s16 xdata Task6_StartTime;//任务6起始运行时间
  84          extern s16 xdata Task6_EndTime;//任务6结束运行时间
  85          extern s32 xdata Task6_OverTime; //任务6运行超时时间
  86          //extern bit Task6_OverTime_Reset; //任务6运行超时自动复位控制位
  87                                        //用于控制任务是否永久运行
  88                                        //1:自动复位 ，任务超时将复位超时计数，任务永久运行
  89                                        //0:不自动复位 任务超时将关闭
  90          
  91          extern s32 xdata Task6_OnTime;  //表示Task6输出ON状态的时间
  92          extern s32 xdata Task6_OffTime; //表示Task6输出OFF状态的时间
  93          
  94          /*端口的触发模式*/
  95          extern bdata u16 Pin_Trigger_Mode;
  96          
  97          /*端口的输入输出模式*/
  98          extern bdata u16 Pin_Mode;
  99          
 100          /*端口关联任务号*/
 101          extern s8 xdata Pin10_Task_Number;
 102          extern s8 xdata Pin11_Task_Number;
 103          
 104          extern s8 xdata Pin12_Task_Number; 
 105          extern s8 xdata Pin13_Task_Number;
 106          extern s8 xdata Pin14_Task_Number;
 107          extern s8 xdata Pin15_Task_Number;
 108          extern s8 xdata Pin16_Task_Number;
 109          extern s8 xdata Pin17_Task_Number;
 110          
 111          extern s8 xdata Pin20_Task_Number;
 112          extern s8 xdata Pin21_Task_Number;
 113          extern s8 xdata Pin22_Task_Number;
 114          extern s8 xdata Pin23_Task_Number;
 115          extern s8 xdata Pin24_Task_Number;
C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 3   

 116          
 117          extern s8 xdata Pin35_Task_Number;
 118          extern s8 xdata Pin36_Task_Number;
 119          extern s8 xdata Pin37_Task_Number;
 120          
 121          /*设置TCP服务器信息*/
 122          extern u8 xdata ATCIPSERVER[]; //="AT+CIPSERVER=1,65535";
 123          /*TCP服务器端口*/
 124          extern s32 xdata TcpServerPort;// = 65535;
 125          
 126          /*STA AP信息*/
 127          extern u8 xdata STA_MODE_Table[]; //={"AT+CWJAP_CUR=\"TP-LINK_888F\",\"asdfghjkl\""};
 128          extern u8 xdata AP_MODE_Table[];  //={"AT+CWSAP_CUR=\"Wireless_Controller_Test\",\"asdfghjkl\",3,4"};
 129          
 130          //extern bdata型参数
 131          //Task_OverTime_Reset
 132          extern bit Task1_OverTime_Reset;
 133          extern bit Task2_OverTime_Reset;
 134          extern bit Task3_OverTime_Reset;
 135          extern bit Task4_OverTime_Reset;
 136          extern bit Task5_OverTime_Reset;
 137          extern bit Task6_OverTime_Reset;
 138          
 139          //触发模式（0为自锁模式）（1为立即模式）
 140          //自锁模式：按键按下，释放才会更新任务状态
 141          //立即模式：按键按下，立刻更新任务状态，按键释放才可重新更新
 142          extern bit Pin10_Trigger_Mode;
 143          extern bit Pin11_Trigger_Mode;
 144          
 145          extern bit Pin12_Trigger_Mode;
 146          extern bit Pin13_Trigger_Mode;
 147          extern bit Pin14_Trigger_Mode;
 148          extern bit Pin15_Trigger_Mode;
 149          extern bit Pin16_Trigger_Mode;
 150          extern bit Pin17_Trigger_Mode;
 151          
 152          extern bit Pin20_Trigger_Mode;
 153          extern bit Pin21_Trigger_Mode;
 154          extern bit Pin22_Trigger_Mode;
 155          extern bit Pin23_Trigger_Mode;
 156          extern bit Pin24_Trigger_Mode;
 157          
 158          extern bit Pin35_Trigger_Mode;
 159          extern bit Pin36_Trigger_Mode;
 160          extern bit Pin37_Trigger_Mode;
 161          
 162          
 163          //输入模式时作为端口触发更新任务号 
 164          //输出模式时选择关联任务号
 165          //端口模式（0为输入模式）（1为输出模式）
 166          extern bit Pin10_Mode;
 167          extern bit Pin11_Mode;
 168          
 169          extern bit Pin12_Mode;
 170          extern bit Pin13_Mode;
 171          extern bit Pin14_Mode;
 172          extern bit Pin15_Mode;
 173          extern bit Pin16_Mode;
 174          extern bit Pin17_Mode;
 175          
 176          extern bit Pin20_Mode;
 177          extern bit Pin21_Mode;
C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 4   

 178          extern bit Pin22_Mode;
 179          extern bit Pin23_Mode;
 180          extern bit Pin24_Mode;
 181          
 182          extern bit Pin35_Mode;
 183          extern bit Pin36_Mode;
 184          extern bit Pin37_Mode;
 185          
 186          
 187          /******************************************************************************/
 188          // 函数名称：EEPROM_Program_Sector_1 
 189          // 输入参数：无
 190          // 输出参数：无 
 191          // 函数功能：EEPROM编程第一个扇区，写入参数的值
 192          /******************************************************************************/
 193          void EEPROM_Program_Sector_1()
 194          {
 195   1        IapEraseSector(IAP_ADDRESS_SECTOR_1); //擦除第一扇区
 196   1        
 197   1        //设置任务1
 198   1        IapProgramByte(0x0000,Task1_StartTime>>8);
 199   1        IapProgramByte(0x0001,Task1_StartTime);
 200   1        
 201   1        IapProgramByte(0x0002,Task1_EndTime>>8);
 202   1        IapProgramByte(0x0003,Task1_EndTime);
 203   1        
 204   1        IapProgramByte(0x0004,Task1_OverTime>>24);
 205   1        IapProgramByte(0x0005,Task1_OverTime>>16);
 206   1        IapProgramByte(0x0006,Task1_OverTime>>8);
 207   1        IapProgramByte(0x0007,Task1_OverTime);
 208   1        
 209   1        IapProgramByte(0x0008,Task1_OnTime>>24);
 210   1        IapProgramByte(0x0009,Task1_OnTime>>16);
 211   1        IapProgramByte(0x000A,Task1_OnTime>>8);
 212   1        IapProgramByte(0x000B,Task1_OnTime);
 213   1        
 214   1        IapProgramByte(0x000C,Task1_OffTime>>24);
 215   1        IapProgramByte(0x000D,Task1_OffTime>>16);
 216   1        IapProgramByte(0x000E,Task1_OffTime>>8);
 217   1        IapProgramByte(0x000F,Task1_OffTime);
 218   1        
 219   1        //设置任务2
 220   1        IapProgramByte(0x0010,Task2_StartTime>>8);
 221   1        IapProgramByte(0x0011,Task2_StartTime);
 222   1        
 223   1        IapProgramByte(0x0012,Task2_EndTime>>8);
 224   1        IapProgramByte(0x0013,Task2_EndTime);
 225   1        
 226   1        IapProgramByte(0x0014,Task2_OverTime>>24);
 227   1        IapProgramByte(0x0015,Task2_OverTime>>16);
 228   1        IapProgramByte(0x0016,Task2_OverTime>>8);
 229   1        IapProgramByte(0x0017,Task2_OverTime);
 230   1        
 231   1        IapProgramByte(0x0018,Task2_OnTime>>24);
 232   1        IapProgramByte(0x0019,Task2_OnTime>>16);
 233   1        IapProgramByte(0x001A,Task2_OnTime>>8);
 234   1        IapProgramByte(0x001B,Task2_OnTime);
 235   1        
 236   1        IapProgramByte(0x001C,Task2_OffTime>>24);
 237   1        IapProgramByte(0x001D,Task2_OffTime>>16);
 238   1        IapProgramByte(0x001E,Task2_OffTime>>8);
 239   1        IapProgramByte(0x001F,Task2_OffTime);
C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 5   

 240   1        
 241   1        //设置任务3
 242   1        IapProgramByte(0x0020,Task3_StartTime>>8);
 243   1        IapProgramByte(0x0021,Task3_StartTime);
 244   1        
 245   1        IapProgramByte(0x0022,Task3_EndTime>>8);
 246   1        IapProgramByte(0x0023,Task3_EndTime);
 247   1        
 248   1        IapProgramByte(0x0024,Task3_OverTime>>24);
 249   1        IapProgramByte(0x0025,Task3_OverTime>>16);
 250   1        IapProgramByte(0x0026,Task3_OverTime>>8);
 251   1        IapProgramByte(0x0027,Task3_OverTime);
 252   1        
 253   1        IapProgramByte(0x0028,Task3_OnTime>>24);
 254   1        IapProgramByte(0x0029,Task3_OnTime>>16);
 255   1        IapProgramByte(0x002A,Task3_OnTime>>8);
 256   1        IapProgramByte(0x002B,Task3_OnTime);
 257   1        
 258   1        IapProgramByte(0x002C,Task3_OffTime>>24);
 259   1        IapProgramByte(0x002D,Task3_OffTime>>16);
 260   1        IapProgramByte(0x002E,Task3_OffTime>>8);
 261   1        IapProgramByte(0x002F,Task3_OffTime);
 262   1        
 263   1        //设置任务4
 264   1        IapProgramByte(0x0030,Task4_StartTime>>8);
 265   1        IapProgramByte(0x0031,Task4_StartTime);
 266   1        
 267   1        IapProgramByte(0x0032,Task4_EndTime>>8);
 268   1        IapProgramByte(0x0033,Task4_EndTime);
 269   1        
 270   1        IapProgramByte(0x0034,Task4_OverTime>>24);
 271   1        IapProgramByte(0x0035,Task4_OverTime>>16);
 272   1        IapProgramByte(0x0036,Task4_OverTime>>8);
 273   1        IapProgramByte(0x0037,Task4_OverTime);
 274   1        
 275   1        IapProgramByte(0x0038,Task4_OnTime>>24);
 276   1        IapProgramByte(0x0039,Task4_OnTime>>16);
 277   1        IapProgramByte(0x003A,Task4_OnTime>>8);
 278   1        IapProgramByte(0x003B,Task4_OnTime);
 279   1        
 280   1        IapProgramByte(0x003C,Task4_OffTime>>24);
 281   1        IapProgramByte(0x003D,Task4_OffTime>>16);
 282   1        IapProgramByte(0x003E,Task4_OffTime>>8);
 283   1        IapProgramByte(0x003F,Task4_OffTime);
 284   1        
 285   1        //设置任务5
 286   1        IapProgramByte(0x0040,Task5_StartTime>>8);
 287   1        IapProgramByte(0x0041,Task5_StartTime);
 288   1        
 289   1        IapProgramByte(0x0042,Task5_EndTime>>8);
 290   1        IapProgramByte(0x0043,Task5_EndTime);
 291   1        
 292   1        IapProgramByte(0x0044,Task5_OverTime>>24);
 293   1        IapProgramByte(0x0045,Task5_OverTime>>16);
 294   1        IapProgramByte(0x0046,Task5_OverTime>>8);
 295   1        IapProgramByte(0x0047,Task5_OverTime);
 296   1        
 297   1        IapProgramByte(0x0048,Task5_OnTime>>24);
 298   1        IapProgramByte(0x0049,Task5_OnTime>>16);
 299   1        IapProgramByte(0x004A,Task5_OnTime>>8);
 300   1        IapProgramByte(0x004B,Task5_OnTime);
 301   1        
C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 6   

 302   1        IapProgramByte(0x004C,Task5_OffTime>>24);
 303   1        IapProgramByte(0x004D,Task5_OffTime>>16);
 304   1        IapProgramByte(0x004E,Task5_OffTime>>8);
 305   1        IapProgramByte(0x004F,Task5_OffTime);
 306   1        
 307   1        //设置任务6
 308   1        IapProgramByte(0x0050,Task6_StartTime>>8);
 309   1        IapProgramByte(0x0051,Task6_StartTime);
 310   1        
 311   1        IapProgramByte(0x0052,Task6_EndTime>>8);
 312   1        IapProgramByte(0x0053,Task6_EndTime);
 313   1        
 314   1        IapProgramByte(0x0054,Task6_OverTime>>24);
 315   1        IapProgramByte(0x0055,Task6_OverTime>>16);
 316   1        IapProgramByte(0x0056,Task6_OverTime>>8);
 317   1        IapProgramByte(0x0057,Task6_OverTime);
 318   1        
 319   1        IapProgramByte(0x0058,Task6_OnTime>>24);
 320   1        IapProgramByte(0x0059,Task6_OnTime>>16);
 321   1        IapProgramByte(0x005A,Task6_OnTime>>8);
 322   1        IapProgramByte(0x005B,Task6_OnTime);
 323   1        
 324   1        IapProgramByte(0x005C,Task6_OffTime>>24);
 325   1        IapProgramByte(0x005D,Task6_OffTime>>16);
 326   1        IapProgramByte(0x005E,Task6_OffTime>>8);
 327   1        IapProgramByte(0x005F,Task6_OffTime);
 328   1        
 329   1        //设置超时复位模式
 330   1        IapProgramByte(0x0060,Task_OverTime_Reset);
 331   1        
 332   1        //设置端口的触发模式
 333   1        IapProgramByte(0x0061,Pin_Trigger_Mode>>8);
 334   1        IapProgramByte(0x0062,Pin_Trigger_Mode);
 335   1          
 336   1        //设置端口的输入输出模式
 337   1        IapProgramByte(0x0063,Pin_Mode>>8);
 338   1        IapProgramByte(0x0064,Pin_Mode);
 339   1        
 340   1        //设置端口关联任务号
 341   1        IapProgramByte(0x0065,Pin10_Task_Number);
 342   1        IapProgramByte(0x0066,Pin11_Task_Number);
 343   1        
 344   1        IapProgramByte(0x0067,Pin12_Task_Number);
 345   1        IapProgramByte(0x0068,Pin13_Task_Number);
 346   1        IapProgramByte(0x0069,Pin14_Task_Number);
 347   1        IapProgramByte(0x006A,Pin15_Task_Number);
 348   1        IapProgramByte(0x006B,Pin16_Task_Number);
 349   1        IapProgramByte(0x006C,Pin17_Task_Number);
 350   1        
 351   1        IapProgramByte(0x006D,Pin20_Task_Number);
 352   1        IapProgramByte(0x006E,Pin21_Task_Number);
 353   1        IapProgramByte(0x006F,Pin22_Task_Number);
 354   1        IapProgramByte(0x0070,Pin23_Task_Number);
 355   1        IapProgramByte(0x0071,Pin24_Task_Number);
 356   1        
 357   1        IapProgramByte(0x0072,Pin35_Task_Number);
 358   1        IapProgramByte(0x0073,Pin36_Task_Number);
 359   1        IapProgramByte(0x0074,Pin37_Task_Number);
 360   1        
 361   1        //设置TCP服务器端口
 362   1        IapProgramByte(0x0075,TcpServerPort>>8);
 363   1        IapProgramByte(0x0076,TcpServerPort);
C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 7   

 364   1        //设置AT指令TCP服务器端口
 365   1        IapProgramByte(0x0077,ATCIPSERVER[15]);
 366   1        IapProgramByte(0x0078,ATCIPSERVER[16]);
 367   1        IapProgramByte(0x0079,ATCIPSERVER[17]);
 368   1        IapProgramByte(0x007A,ATCIPSERVER[18]);
 369   1        IapProgramByte(0x007B,ATCIPSERVER[19]);
 370   1        
 371   1        //写入STA信息
 372   1        //124-0x007C  274-0x0112
 373   1        for(EepromSta=124;EepromSta<274;EepromSta++){
 374   2           IapProgramByte(EepromSta,STA_MODE_Table[EepromSta-124]);
 375   2        }
 376   1        
 377   1        //写入AP信息
 378   1        //274-0x0112 424-0x01A8
 379   1        for(EepromAp=274;EepromAp<424;EepromAp++){
 380   2           IapProgramByte(EepromAp,AP_MODE_Table[EepromAp-274]);
 381   2        }
 382   1        
 383   1      }
 384          /******************************************************************************/
 385          // 函数名称：EEPROM_Program_Sector_2 
 386          // 输入参数：无
 387          // 输出参数：无 
 388          // 函数功能：EEPROM编程第二个扇区，写入参数的值
 389          /******************************************************************************/
 390          /*
 391          void EEPROM_Program_Sector_2()
 392          {
 393            
 394          }
 395          */
 396          /******************************************************************************/
 397          // 函数名称：EEPROM_Read_Sector_1 
 398          // 输入参数：无
 399          // 输出参数：无 
 400          // 函数功能：EEPROM读取第一个扇区，加载参数的值
 401          /******************************************************************************/
 402          void EEPROM_Read_Sector_1()
 403          {
 404   1      
 405   1        //读取任务一
 406   1        Task1_StartTime = IapReadByte(0x0000);
 407   1        Task1_StartTime = (Task1_StartTime<<8)|IapReadByte(0x0001);
 408   1        
 409   1        Task1_EndTime = IapReadByte(0x0002);
 410   1        Task1_EndTime = (Task1_EndTime<<8)|IapReadByte(0x0003);
 411   1      
 412   1        Task1_OverTime = IapReadByte(0x0004);
 413   1        Task1_OverTime = (Task1_OverTime<<8)|IapReadByte(0x0005);
 414   1        Task1_OverTime = (Task1_OverTime<<8)|IapReadByte(0x0006);
 415   1        Task1_OverTime = (Task1_OverTime<<8)|IapReadByte(0x0007);
 416   1        
 417   1        Task1_OnTime = IapReadByte(0x0008);
 418   1        Task1_OnTime = (Task1_OnTime<<8)|IapReadByte(0x0009);
 419   1        Task1_OnTime = (Task1_OnTime<<8)|IapReadByte(0x000A);
 420   1        Task1_OnTime = (Task1_OnTime<<8)|IapReadByte(0x000B);
 421   1        
 422   1        Task1_OffTime = IapReadByte(0x000C);
 423   1        Task1_OffTime = (Task1_OffTime<<8)|IapReadByte(0x000D);
 424   1        Task1_OffTime = (Task1_OffTime<<8)|IapReadByte(0x000E);
 425   1        Task1_OffTime = (Task1_OffTime<<8)|IapReadByte(0x000F);
C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 8   

 426   1        
 427   1        //读取任务二
 428   1        Task2_StartTime = IapReadByte(0x0010);
 429   1        Task2_StartTime = (Task2_StartTime<<8)|IapReadByte(0x0011);
 430   1        
 431   1        Task2_EndTime = IapReadByte(0x0012);
 432   1        Task2_EndTime = (Task2_EndTime<<8)|IapReadByte(0x0013);
 433   1      
 434   1        Task2_OverTime = IapReadByte(0x0014);
 435   1        Task2_OverTime = (Task2_OverTime<<8)|IapReadByte(0x0015);
 436   1        Task2_OverTime = (Task2_OverTime<<8)|IapReadByte(0x0016);
 437   1        Task2_OverTime = (Task2_OverTime<<8)|IapReadByte(0x0017);
 438   1        
 439   1        Task2_OnTime = IapReadByte(0x0018);
 440   1        Task2_OnTime = (Task2_OnTime<<8)|IapReadByte(0x0019);
 441   1        Task2_OnTime = (Task2_OnTime<<8)|IapReadByte(0x001A);
 442   1        Task2_OnTime = (Task2_OnTime<<8)|IapReadByte(0x001B);
 443   1        
 444   1        Task2_OffTime = IapReadByte(0x001C);
 445   1        Task2_OffTime = (Task2_OffTime<<8)|IapReadByte(0x001D);
 446   1        Task2_OffTime = (Task2_OffTime<<8)|IapReadByte(0x001E);
 447   1        Task2_OffTime = (Task2_OffTime<<8)|IapReadByte(0x001F);
 448   1        
 449   1        //读取任务三
 450   1        Task3_StartTime = IapReadByte(0x0020);
 451   1        Task3_StartTime = (Task3_StartTime<<8)|IapReadByte(0x0021);
 452   1        
 453   1        Task3_EndTime = IapReadByte(0x0022);
 454   1        Task3_EndTime = (Task3_EndTime<<8)|IapReadByte(0x0023);
 455   1      
 456   1        Task3_OverTime = IapReadByte(0x0024);
 457   1        Task3_OverTime = (Task3_OverTime<<8)|IapReadByte(0x0025);
 458   1        Task3_OverTime = (Task3_OverTime<<8)|IapReadByte(0x0026);
 459   1        Task3_OverTime = (Task3_OverTime<<8)|IapReadByte(0x0027);
 460   1        
 461   1        Task3_OnTime = IapReadByte(0x0028);
 462   1        Task3_OnTime = (Task3_OnTime<<8)|IapReadByte(0x0029);
 463   1        Task3_OnTime = (Task3_OnTime<<8)|IapReadByte(0x002A);
 464   1        Task3_OnTime = (Task3_OnTime<<8)|IapReadByte(0x002B);
 465   1        
 466   1        Task3_OffTime = IapReadByte(0x002C);
 467   1        Task3_OffTime = (Task3_OffTime<<8)|IapReadByte(0x002D);
 468   1        Task3_OffTime = (Task3_OffTime<<8)|IapReadByte(0x002E);
 469   1        Task3_OffTime = (Task3_OffTime<<8)|IapReadByte(0x002F);
 470   1        
 471   1        //读取任务四
 472   1        Task4_StartTime = IapReadByte(0x0030);
 473   1        Task4_StartTime = (Task4_StartTime<<8)|IapReadByte(0x0031);
 474   1        
 475   1        Task4_EndTime = IapReadByte(0x0032);
 476   1        Task4_EndTime = (Task4_EndTime<<8)|IapReadByte(0x0033);
 477   1      
 478   1        Task4_OverTime = IapReadByte(0x0034);
 479   1        Task4_OverTime = (Task4_OverTime<<8)|IapReadByte(0x0035);
 480   1        Task4_OverTime = (Task4_OverTime<<8)|IapReadByte(0x0036);
 481   1        Task4_OverTime = (Task4_OverTime<<8)|IapReadByte(0x0037);
 482   1        
 483   1        Task4_OnTime = IapReadByte(0x0038);
 484   1        Task4_OnTime = (Task4_OnTime<<8)|IapReadByte(0x0039);
 485   1        Task4_OnTime = (Task4_OnTime<<8)|IapReadByte(0x003A);
 486   1        Task4_OnTime = (Task4_OnTime<<8)|IapReadByte(0x003B);
 487   1        
C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 9   

 488   1        Task4_OffTime = IapReadByte(0x003C);
 489   1        Task4_OffTime = (Task4_OffTime<<8)|IapReadByte(0x003D);
 490   1        Task4_OffTime = (Task4_OffTime<<8)|IapReadByte(0x003E);
 491   1        Task4_OffTime = (Task4_OffTime<<8)|IapReadByte(0x003F);
 492   1        
 493   1        //读取任务五
 494   1        Task5_StartTime = IapReadByte(0x0040);
 495   1        Task5_StartTime = (Task5_StartTime<<8)|IapReadByte(0x0041);
 496   1        
 497   1        Task5_EndTime = IapReadByte(0x0042);
 498   1        Task5_EndTime = (Task5_EndTime<<8)|IapReadByte(0x0043);
 499   1      
 500   1        Task5_OverTime = IapReadByte(0x0044);
 501   1        Task5_OverTime = (Task5_OverTime<<8)|IapReadByte(0x0045);
 502   1        Task5_OverTime = (Task5_OverTime<<8)|IapReadByte(0x0046);
 503   1        Task5_OverTime = (Task5_OverTime<<8)|IapReadByte(0x0047);
 504   1        
 505   1        Task5_OnTime = IapReadByte(0x0048);
 506   1        Task5_OnTime = (Task5_OnTime<<8)|IapReadByte(0x0049);
 507   1        Task5_OnTime = (Task5_OnTime<<8)|IapReadByte(0x004A);
 508   1        Task5_OnTime = (Task5_OnTime<<8)|IapReadByte(0x004B);
 509   1        
 510   1        Task5_OffTime = IapReadByte(0x004C);
 511   1        Task5_OffTime = (Task5_OffTime<<8)|IapReadByte(0x004D);
 512   1        Task5_OffTime = (Task5_OffTime<<8)|IapReadByte(0x004E);
 513   1        Task5_OffTime = (Task5_OffTime<<8)|IapReadByte(0x004F);
 514   1        
 515   1        //读取任务六
 516   1        Task6_StartTime = IapReadByte(0x0050);
 517   1        Task6_StartTime = (Task6_StartTime<<8)|IapReadByte(0x0051);
 518   1        
 519   1        Task6_EndTime = IapReadByte(0x0052);
 520   1        Task6_EndTime = (Task6_EndTime<<8)|IapReadByte(0x0053);
 521   1      
 522   1        Task6_OverTime = IapReadByte(0x0054);
 523   1        Task6_OverTime = (Task6_OverTime<<8)|IapReadByte(0x0055);
 524   1        Task6_OverTime = (Task6_OverTime<<8)|IapReadByte(0x0056);
 525   1        Task6_OverTime = (Task6_OverTime<<8)|IapReadByte(0x0057);
 526   1        
 527   1        Task6_OnTime = IapReadByte(0x0058);
 528   1        Task6_OnTime = (Task6_OnTime<<8)|IapReadByte(0x0059);
 529   1        Task6_OnTime = (Task6_OnTime<<8)|IapReadByte(0x005A);
 530   1        Task6_OnTime = (Task6_OnTime<<8)|IapReadByte(0x005B);
 531   1        
 532   1        Task6_OffTime = IapReadByte(0x005C);
 533   1        Task6_OffTime = (Task6_OffTime<<8)|IapReadByte(0x005D);
 534   1        Task6_OffTime = (Task6_OffTime<<8)|IapReadByte(0x005E);
 535   1        Task6_OffTime = (Task6_OffTime<<8)|IapReadByte(0x005F);
 536   1        
 537   1        //对所有任务，读取超时复位模式
 538   1        Task_OverTime_Reset = IapReadByte(0x0060);
 539   1        
 540   1        //读取端口的触发模式
 541   1        Pin_Trigger_Mode = IapReadByte(0x0061);
 542   1        Pin_Trigger_Mode = (Pin_Trigger_Mode<<8)|IapReadByte(0x0062);
 543   1        
 544   1        //读取端口输入输出模式
 545   1        Pin_Mode = IapReadByte(0x0063);
 546   1        Pin_Mode = (Pin_Mode<<8)|IapReadByte(0x0064);
 547   1        
 548   1        //设置端口关联任务号
 549   1        Pin10_Task_Number = IapReadByte(0x0065);
C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 10  

 550   1        Pin11_Task_Number = IapReadByte(0x0066);
 551   1        
 552   1        Pin12_Task_Number = IapReadByte(0x0067);
 553   1        Pin13_Task_Number = IapReadByte(0x0068);
 554   1        Pin14_Task_Number = IapReadByte(0x0069);
 555   1        Pin15_Task_Number = IapReadByte(0x006A);
 556   1        Pin16_Task_Number = IapReadByte(0x006B);
 557   1        Pin17_Task_Number = IapReadByte(0x006C);
 558   1        
 559   1        Pin20_Task_Number = IapReadByte(0x006D);
 560   1        Pin21_Task_Number = IapReadByte(0x006E);
 561   1        Pin22_Task_Number = IapReadByte(0x006F);
 562   1        Pin23_Task_Number = IapReadByte(0x0070);
 563   1        Pin24_Task_Number = IapReadByte(0x0071);
 564   1        
 565   1        Pin35_Task_Number = IapReadByte(0x0072);
 566   1        Pin36_Task_Number = IapReadByte(0x0073);
 567   1        Pin37_Task_Number = IapReadByte(0x0074);
 568   1        
 569   1        //读取TCP服务器端口
 570   1        TcpServerPort = IapReadByte(0x0075);
 571   1        TcpServerPort = (TcpServerPort<<8)|IapReadByte(0x0076);
 572   1        //读取指令TCP服务器端口
 573   1        ATCIPSERVER[15] = IapReadByte(0x0077);
 574   1        ATCIPSERVER[16] = IapReadByte(0x0078);
 575   1        ATCIPSERVER[17] = IapReadByte(0x0079);
 576   1        ATCIPSERVER[18] = IapReadByte(0x007A);
 577   1        ATCIPSERVER[19] = IapReadByte(0x007B);
 578   1        
 579   1        
 580   1        //读取STA信息
 581   1        //124-0x007C 274-0x0112
 582   1        for(EepromSta=124;EepromSta<274;EepromSta++){
 583   2           STA_MODE_Table[EepromSta-124] = IapReadByte(EepromSta);
 584   2        }
 585   1        
 586   1        //读取AP信息
 587   1        //274-0x0112 424-0x01A8
 588   1        for(EepromAp=274;EepromAp<424;EepromAp++){
 589   2           AP_MODE_Table[EepromAp-274] = IapReadByte(EepromAp);
 590   2        }
 591   1        
 592   1      }
 593          /******************************************************************************/
 594          // 函数名称：EEPROM_Read_Sector_2 
 595          // 输入参数：无
 596          // 输出参数：无 
 597          // 函数功能：EEPROM读取第二个扇区，加载参数的值
 598          /******************************************************************************/
 599          /*
 600          void EEPROM_Read_Sector_2()
 601          {
 602            
 603          }
 604          */
 605          
 606          /******************************************************************************/
 607          // 函数名称：SYSTEM_DATA_RESET 
 608          // 输入参数：无
 609          // 输出参数：无 
 610          // 函数功能：将所有系统数据重置为确定的数据
 611          /******************************************************************************/
C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 11  

 612          void SYSTEM_DATA_RESET()
 613          {
 614   1        static u8 i = 0; 
 615   1        //任务参数设定
 616   1        //任务一
 617   1        Task1_StartTime = 0;//任务1起始运行时间
 618   1        Task1_EndTime = 1439;//任务1结束运行时间
 619   1        Task1_OverTime = 2*3000; //任务1运行超时时间
 620   1        Task1_OverTime_Reset = 0; //任务1运行超时自动复位控制位
 621   1                                      //用于控制任务是否永久运行
 622   1                                      //1:自动复位 ，任务超时将复位超时计数，任务永久运行
 623   1                                      //0:不自动复位 任务超时将关闭
 624   1      
 625   1        Task1_OnTime = 2*1;  //表示Task1输出ON状态的时间
 626   1        Task1_OffTime = 2*1; //表示Task1输出OFF状态的时间
 627   1      
 628   1        //任务二
 629   1        Task2_StartTime = 0;//任务2起始运行时间
 630   1        Task2_EndTime = 1439;//任务2结束运行时间
 631   1        Task2_OverTime =2*3000; //任务2运行超时时间
 632   1        Task2_OverTime_Reset = 0; //任务2运行超时自动复位控制位
 633   1                                      //用于控制任务是否永久运行
 634   1                                      //1:自动复位 ，任务超时将复位超时计数，任务永久运行
 635   1                                      //0:不自动复位 任务超时将关闭
 636   1      
 637   1        Task2_OnTime = 2*1;  //表示Task2输出ON状态的时间
 638   1        Task2_OffTime = 2*1; //表示Task2输出OFF状态的时间
 639   1      
 640   1      
 641   1        //任务三
 642   1        Task3_StartTime = 0;//任务3起始运行时间
 643   1        Task3_EndTime = 1439;//任务3结束运行时间
 644   1        Task3_OverTime = 2*3000; //任务3运行超时时间
 645   1        Task3_OverTime_Reset = 0; //任务3运行超时自动复位控制位
 646   1                                      //用于控制任务是否永久运行
 647   1                                      //1:自动复位 ，任务超时将复位超时计数，任务永久运行
 648   1                                      //0:不自动复位 任务超时将关闭
 649   1      
 650   1        Task3_OnTime = 2*1;  //表示Task3输出ON状态的时间
 651   1        Task3_OffTime = 2*1; //表示Task3输出OFF状态的时间
 652   1      
 653   1      
 654   1        //任务四
 655   1        Task4_StartTime = 0;//任务4起始运行时间
 656   1        Task4_EndTime = 1439;//任务4结束运行时间
 657   1        Task4_OverTime = 2*3000; //任务4运行超时时间
 658   1        Task4_OverTime_Reset = 0; //任务4运行超时自动复位控制位
 659   1                                      //用于控制任务是否永久运行
 660   1                                      //1:自动复位 ，任务超时将复位超时计数，任务永久运行
 661   1                                      //0:不自动复位 任务超时将关闭
 662   1      
 663   1        Task4_OnTime = 2*1;  //表示Task4输出ON状态的时间
 664   1        Task4_OffTime = 2*1; //表示Task4输出OFF状态的时间
 665   1      
 666   1        //任务五
 667   1        Task5_StartTime = 0;//任务5起始运行时间
 668   1        Task5_EndTime = 1439;//任务5结束运行时间
 669   1        Task5_OverTime = 2*3000; //任务5运行超时时间
 670   1        Task5_OverTime_Reset = 0; //任务5运行超时自动复位控制位
 671   1                                      //用于控制任务是否永久运行
 672   1                                      //1:自动复位 ，任务超时将复位超时计数，任务永久运行
 673   1                                      //0:不自动复位 任务超时将关闭
C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 12  

 674   1      
 675   1        Task5_OnTime = 2*1;  //表示Task5输出ON状态的时间
 676   1        Task5_OffTime = 2*1; //表示Task5输出OFF状态的时间
 677   1      
 678   1        //任务六
 679   1        Task6_StartTime = 0;//任务6起始运行时间
 680   1        Task6_EndTime = 1439;//任务6结束运行时间
 681   1        Task6_OverTime = 2*3000; //任务6运行超时时间
 682   1        Task6_OverTime_Reset = 0; //任务6运行超时自动复位控制位
 683   1                                      //用于控制任务是否永久运行
 684   1                                      //1:自动复位 ，任务超时将复位超时计数，任务永久运行
 685   1                                      //0:不自动复位 任务超时将关闭
 686   1      
 687   1        Task6_OnTime = 2*1;  //表示Task6输出ON状态的时间
 688   1        Task6_OffTime = 2*1; //表示Task6输出OFF状态的时间
 689   1      
 690   1        //端口的触发模式
 691   1        //触发模式（0为自锁模式）（1为立即模式）
 692   1        //自锁模式：按键按下，释放才会更新任务状态
 693   1        //立即模式：按键按下，立刻更新任务状态，按键释放才可重新更新
 694   1        Pin10_Trigger_Mode = 0;
 695   1        Pin11_Trigger_Mode = 0;
 696   1      
 697   1        Pin12_Trigger_Mode = 0;
 698   1        Pin13_Trigger_Mode = 0;
 699   1        Pin14_Trigger_Mode = 0;
 700   1        Pin15_Trigger_Mode = 0;
 701   1        Pin16_Trigger_Mode = 0;
 702   1        Pin17_Trigger_Mode = 0;
 703   1      
 704   1        Pin20_Trigger_Mode = 0;
 705   1        Pin21_Trigger_Mode = 0;
 706   1        Pin22_Trigger_Mode = 0;
 707   1        Pin23_Trigger_Mode = 0;
 708   1        Pin24_Trigger_Mode = 0;
 709   1      
 710   1        Pin35_Trigger_Mode = 0;
 711   1        Pin36_Trigger_Mode = 0;
 712   1        Pin37_Trigger_Mode = 0;
 713   1      
 714   1        //端口的输入输出模式
 715   1        //输入模式时作为端口触发更新任务号 
 716   1        //输出模式时选择关联任务号
 717   1        //端口模式（0为输入模式）（1为输出模式）
 718   1        Pin10_Mode = 1;
 719   1        Pin11_Mode = 1;
 720   1      
 721   1        Pin12_Mode = 0;
 722   1        Pin13_Mode = 0;
 723   1        Pin14_Mode = 0;
 724   1        Pin15_Mode = 0;
 725   1        Pin16_Mode = 0;
 726   1        Pin17_Mode = 0;
 727   1      
 728   1        Pin20_Mode = 0;
 729   1        Pin21_Mode = 0;
 730   1        Pin22_Mode = 0;
 731   1        Pin23_Mode = 0;
 732   1        Pin24_Mode = 0;
 733   1      
 734   1        Pin35_Mode = 0;
 735   1        Pin36_Mode = 0;
C51 COMPILER V9.60.0.0   EEPROM_APPLICATION                                                08/02/2022 04:10:14 PAGE 13  

 736   1        Pin37_Mode = 0;
 737   1      
 738   1        //端口关联任务号
 739   1        Pin10_Task_Number = 1;
 740   1        Pin11_Task_Number = 2;
 741   1      
 742   1        Pin12_Task_Number = 1; 
 743   1        Pin13_Task_Number = 1;
 744   1        Pin14_Task_Number = 2;
 745   1        Pin15_Task_Number = 2;
 746   1        Pin16_Task_Number = 3;
 747   1        Pin17_Task_Number = 3;
 748   1      
 749   1        Pin20_Task_Number = 4;
 750   1        Pin21_Task_Number = 4;
 751   1        Pin22_Task_Number = 5;
 752   1        Pin23_Task_Number = 5;
 753   1        Pin24_Task_Number = 6;
 754   1      
 755   1        Pin35_Task_Number = 6;
 756   1        Pin36_Task_Number = 6;
 757   1        Pin37_Task_Number = 6;
 758   1      
 759   1        //设置TCP服务器信息
 760   1        for(i=0;i<22;i++){
 761   2          ATCIPSERVER[i]=ATCIPSERVER_Default[i];
 762   2        }
 763   1          
 764   1        //TCP服务器端口
 765   1        TcpServerPort = 1;
 766   1      
 767   1        //STA AP信息
 768   1        for(i=1;1<151;i++){
 769   2          if(STA_MODE_Table_Default[i-2]=='\n'){break;}
 770   2          STA_MODE_Table[i-1]=STA_MODE_Table_Default[i-1];
 771   2        }
 772   1        
 773   1        for(i=1;i<151;i++){
 774   2          if(AP_MODE_Table_Default[i-2]=='\n'){break;}
 775   2          AP_MODE_Table[i-1]=AP_MODE_Table_Default[i-1];
 776   2        }
 777   1        
 778   1        
 779   1      
 780   1        
 781   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6124    ----
   CONSTANT SIZE    =    133    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
