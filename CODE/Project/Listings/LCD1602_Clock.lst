C51 COMPILER V9.60.0.0   LCD1602_CLOCK                                                     08/13/2022 23:50:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LCD1602_CLOCK
OBJECT MODULE PLACED IN ..\Output\LCD1602_Clock.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE ..\Source\Application\LCD1602_Clock.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\So
                    -urce\Application;..\Source\Device_Driver;..\Source\System;D:\Keil\C51\INC\STC) DEBUG OBJECTEXTEND PRINT(.\Listings\LCD16
                    -02_Clock.lst) TABS(2) OBJECT(..\Output\LCD1602_Clock.obj)

line level    source

   1          /******************************************************************************/
   2          // 包含头文件
   3          /******************************************************************************/
   4          #include "config.h"
   5          #include "LCD1602_Clock.h"
   6          #include "LCD1602.h"
   7          
   8          /******************************************************************************/
   9          // 变量初始化
  10          /******************************************************************************/
  11          uint8 hour_ten_pos=0;   //小时十位(用于充当LCD1602点阵数字显示函数的列变化量)
  12          uint8 hour_bit_pos=4;   //小时个位(用于充当LCD1602点阵数字显示函数的列变化量)
  13          uint8 minute_ten_pos=9;   //分钟十位(用于充当LCD1602点阵数字显示函数的列变化量)
  14          uint8 minute_bit_pos=13;  //分钟个位(用于充当LCD1602点阵数字显示函数的列变化量)
  15          
  16          /*时间存储变量*/
  17          s8 hour=0,minute=0,second=0;
  18          
  19          /*当前时间转换成分钟的变量*/
  20          u16 NowTime = 0;
  21          
  22          /*判断时间界面“点”更新的变量*/
  23          bit point=0;
  24          
  25          //时间补偿控制位
  26          bit isFixTime = 1;
  27          
  28          u8 xdata Max_Month_Days[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};
  29          
  30          extern u8 xdata DateTable[13];
  31          extern u8 xdata TimeTable[12];
  32          
  33          extern s16 Year;
  34          extern s8 Month;
  35          extern s8 Day;
  36          
  37          /******************************************************************************/
  38          // 字符构造表
  39          /******************************************************************************/
  40          uint8 code lcd1602Table0[8]={0x1F,0x1F,0x00,0x00,0x00,0x00,0x00,0x00}; //0点阵__上
  41          uint8 code lcd1602Table1[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x1F}; //1点阵__下
  42          uint8 code lcd1602Table2[8]={0x1F,0x1F,0x00,0x00,0x00,0x00,0x1F,0x1F}; //2点阵__上下
  43          uint8 code lcd1602Table3[8]={0x1F,0x1F,0x00,0x1F,0x1F,0x00,0x1F,0x1F}; //3点阵__上中下
  44          uint8 code lcd1602Table4[8]={0x00,0x00,0x07,0x07,0x07,0x07,0x00,0x00}; //4点阵__点点左
  45          uint8 code lcd1602Table5[8]={0x00,0x00,0x1C,0x1C,0x1C,0x1C,0x00,0x00}; //5点阵__点点右
  46          uint8 code lcd1602Table6[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}; //6点阵__写空
  47          
  48          /******************************************************************************/
  49          // LCD1602点阵数字显示函数
  50          // 函数名称：Lcd1602_Number
  51          // 输入参数：column_change-列变化量(用于确定显示位置)，number-想要显示的数字
  52          // 输出参数：无 
  53          // 函数功能：LCD1602在指定位置显示点阵数字
C51 COMPILER V9.60.0.0   LCD1602_CLOCK                                                     08/13/2022 23:50:23 PAGE 2   

  54          /******************************************************************************/
  55          void LCD1602_Number(uint8 column_change,uint8 number)
  56          {
  57   1        switch(number){
  58   2          case 0:
  59   2            Lcd1602_Custom_Char(1,column_change+1,3,lcd1602Table3);
  60   2            Lcd1602_Custom_Char(1,column_change+2,0,lcd1602Table0);
  61   2            Lcd1602_Custom_Char(1,column_change+3,3,lcd1602Table3);
  62   2            Lcd1602_Custom_Char(2,column_change+1,3,lcd1602Table3);
  63   2            Lcd1602_Custom_Char(2,column_change+2,1,lcd1602Table1);
  64   2            Lcd1602_Custom_Char(2,column_change+3,3,lcd1602Table3);
  65   2            break;
  66   2          case 1:
  67   2            Lcd1602_Custom_Char(1,column_change+1,0,lcd1602Table0);
  68   2            Lcd1602_Custom_Char(1,column_change+2,3,lcd1602Table3);
  69   2            Lcd1602_Custom_Char(1,column_change+3,6,lcd1602Table6);
  70   2            Lcd1602_Custom_Char(2,column_change+1,1,lcd1602Table1);
  71   2            Lcd1602_Custom_Char(2,column_change+2,3,lcd1602Table3);
  72   2            Lcd1602_Custom_Char(2,column_change+3,1,lcd1602Table1);
  73   2            break;
  74   2          case 2:
  75   2            Lcd1602_Custom_Char(1,column_change+1,0,lcd1602Table0);
  76   2            Lcd1602_Custom_Char(1,column_change+2,0,lcd1602Table0);
  77   2            Lcd1602_Custom_Char(1,column_change+3,3,lcd1602Table3);
  78   2            Lcd1602_Custom_Char(2,column_change+1,3,lcd1602Table3);
  79   2            Lcd1602_Custom_Char(2,column_change+2,2,lcd1602Table2);
  80   2            Lcd1602_Custom_Char(2,column_change+3,2,lcd1602Table2);
  81   2            break;
  82   2          case 3:
  83   2            Lcd1602_Custom_Char(1,column_change+1,2,lcd1602Table2);
  84   2            Lcd1602_Custom_Char(1,column_change+2,2,lcd1602Table2);
  85   2            Lcd1602_Custom_Char(1,column_change+3,3,lcd1602Table3);
  86   2            Lcd1602_Custom_Char(2,column_change+1,2,lcd1602Table2);
  87   2            Lcd1602_Custom_Char(2,column_change+2,2,lcd1602Table2);
  88   2            Lcd1602_Custom_Char(2,column_change+3,3,lcd1602Table3);
  89   2            break;
  90   2          case 4:
  91   2            Lcd1602_Custom_Char(1,column_change+1,3,lcd1602Table3);
  92   2            Lcd1602_Custom_Char(1,column_change+2,6,lcd1602Table6);
  93   2            Lcd1602_Custom_Char(1,column_change+3,3,lcd1602Table3);
  94   2            Lcd1602_Custom_Char(2,column_change+1,0,lcd1602Table0);
  95   2            Lcd1602_Custom_Char(2,column_change+2,0,lcd1602Table0);
  96   2            Lcd1602_Custom_Char(2,column_change+3,3,lcd1602Table3);
  97   2            break;
  98   2          case 5:
  99   2            Lcd1602_Custom_Char(1,column_change+1,3,lcd1602Table3);
 100   2            Lcd1602_Custom_Char(1,column_change+2,2,lcd1602Table2);
 101   2            Lcd1602_Custom_Char(1,column_change+3,2,lcd1602Table2);
 102   2            Lcd1602_Custom_Char(2,column_change+1,1,lcd1602Table1);
 103   2            Lcd1602_Custom_Char(2,column_change+2,1,lcd1602Table1);
 104   2            Lcd1602_Custom_Char(2,column_change+3,3,lcd1602Table3);
 105   2            break;
 106   2          case 6:
 107   2            Lcd1602_Custom_Char(1,column_change+1,3,lcd1602Table3);
 108   2            Lcd1602_Custom_Char(1,column_change+2,2,lcd1602Table2);
 109   2            Lcd1602_Custom_Char(1,column_change+3,2,lcd1602Table2);
 110   2            Lcd1602_Custom_Char(2,column_change+1,3,lcd1602Table3);
 111   2            Lcd1602_Custom_Char(2,column_change+2,1,lcd1602Table1);
 112   2            Lcd1602_Custom_Char(2,column_change+3,3,lcd1602Table3);
 113   2            break;
 114   2          case 7:
 115   2            Lcd1602_Custom_Char(1,column_change+1,0,lcd1602Table0);
C51 COMPILER V9.60.0.0   LCD1602_CLOCK                                                     08/13/2022 23:50:23 PAGE 3   

 116   2            Lcd1602_Custom_Char(1,column_change+2,0,lcd1602Table0);
 117   2            Lcd1602_Custom_Char(1,column_change+3,3,lcd1602Table3);
 118   2            Lcd1602_Custom_Char(2,column_change+1,6,lcd1602Table6);
 119   2            Lcd1602_Custom_Char(2,column_change+2,6,lcd1602Table6);
 120   2            Lcd1602_Custom_Char(2,column_change+3,3,lcd1602Table3);
 121   2            break;
 122   2          case 8:
 123   2            Lcd1602_Custom_Char(1,column_change+1,3,lcd1602Table3);
 124   2            Lcd1602_Custom_Char(1,column_change+2,2,lcd1602Table2);
 125   2            Lcd1602_Custom_Char(1,column_change+3,3,lcd1602Table3);
 126   2            Lcd1602_Custom_Char(2,column_change+1,3,lcd1602Table3);
 127   2            Lcd1602_Custom_Char(2,column_change+2,2,lcd1602Table2);
 128   2            Lcd1602_Custom_Char(2,column_change+3,3,lcd1602Table3);
 129   2            break;
 130   2          case 9:
 131   2            Lcd1602_Custom_Char(1,column_change+1,3,lcd1602Table3);
 132   2            Lcd1602_Custom_Char(1,column_change+2,0,lcd1602Table0);
 133   2            Lcd1602_Custom_Char(1,column_change+3,3,lcd1602Table3);
 134   2            Lcd1602_Custom_Char(2,column_change+1,2,lcd1602Table2);
 135   2            Lcd1602_Custom_Char(2,column_change+2,2,lcd1602Table2);
 136   2            Lcd1602_Custom_Char(2,column_change+3,3,lcd1602Table3);
 137   2            break;
 138   2        }
 139   1      }
 140          
 141          /******************************************************************************/
 142          // LCD1602点阵数字时钟时间更新函数
 143          // 函数名称：Lcd1602_Time_Update
 144          // 输入参数：无
 145          // 输出参数：无 
 146          // 函数功能：LCD1602点阵数字时钟时间更新
 147          /******************************************************************************/
 148          void LCD1602_Time_Update()
 149          {
 150   1      
 151   1        //判断是否为闰年，是则将二月修改为29天，不是则为28天
 152   1        if(Year%400==0||(Year%4==0&&Year%100!=0))
 153   1        {
 154   2          Max_Month_Days[2]=29;  //闰年
 155   2        }else{
 156   2          Max_Month_Days[2]=28;  //平年
 157   2        }
 158   1        
 159   1        /*
 160   1        //时间补偿，每两个小时(奇数个小时做补偿)
 161   1        if((isFixTime==1)&&(hour%2!=0)&&(minute==59)&&(second==59))
 162   1        {
 163   1          second--;
 164   1          isFixTime = 0; //关闭时间补偿
 165   1        }
 166   1        */
 167   1        
 168   1        //时间补偿
 169   1        if((isFixTime==1)&&(hour%2!=0)&&(minute==59)&&(second==59))
 170   1        {
 171   2          second--;
 172   2          isFixTime = 0; //关闭时间补偿
 173   2        }
 174   1        //时间补偿
 175   1        else if((isFixTime==1)&&(hour%2==0)&&(minute==59)&&(second==59))
 176   1        {
 177   2          second--;
C51 COMPILER V9.60.0.0   LCD1602_CLOCK                                                     08/13/2022 23:50:23 PAGE 4   

 178   2          second--;
 179   2          isFixTime = 0; //关闭时间补偿
 180   2        }
 181   1        
 182   1        point=~point;
 183   1        second++;
 184   1        if(second==60){
 185   2          isFixTime = 1; //开启时间补偿
 186   2          second=0;
 187   2          minute++;
 188   2          if(minute==60){
 189   3            minute=0;
 190   3            hour++;
 191   3            if(hour==24){
 192   4              hour=0;
 193   4              Day++;
 194   4              if(Day>Max_Month_Days[Month]){
 195   5                Day=1;
 196   5                Month++;
 197   5                if(Month==13){
 198   6                  Month=1;
 199   6                  Year++;
 200   6                }
 201   5              }
 202   4            }
 203   3          }
 204   2        }
 205   1        
 206   1        NowTime = hour*60+minute;  //当前时间的转换值单位为分钟（0-1439） 
 207   1        
 208   1        //更新日期时间数组
 209   1        //遍历时间数组写入时间信息
 210   1        //有用时间数据一共19位为：2022/06/14 19:03:24
 211   1        
 212   1      //  更新日期数据
 213   1        DateTable[0]=Year/1000%10+'0';
 214   1        DateTable[1]=Year/100%10+'0';
 215   1        DateTable[2]=Year/10%10+'0';
 216   1        DateTable[3]=Year%10+'0';
 217   1        
 218   1        DateTable[5]=Month/10%10+'0';
 219   1        DateTable[6]=Month%10+'0';
 220   1        
 221   1        DateTable[8]=Day/10%10+'0';
 222   1        DateTable[9]=Day/1%10+'0';
 223   1        
 224   1        //  更新时间数据
 225   1        TimeTable[0]=hour/10%10+'0';
 226   1        TimeTable[1]=hour/1%10+'0';
 227   1      
 228   1        TimeTable[3]=minute/10%10+'0';
 229   1        TimeTable[4]=minute/1%10+'0';
 230   1        
 231   1        TimeTable[6]=second/10%10+'0';      
 232   1        TimeTable[7]=second/1%10+'0';
 233   1      
 234   1        
 235   1      }
 236          
 237          
 238          /******************************************************************************/
 239          // LCD1602点阵数字时钟（数字+点）显示函数
C51 COMPILER V9.60.0.0   LCD1602_CLOCK                                                     08/13/2022 23:50:23 PAGE 5   

 240          // 函数名称：Lcd1602_Clock_Update
 241          // 输入参数：无
 242          // 输出参数：无 
 243          // 函数功能：LCD1602刷新点阵数字时钟
 244          /******************************************************************************/
 245          void LCD1602_Clock_Update()
 246          {
 247   1        LCD1602_Number(minute_ten_pos,minute/10);
 248   1        LCD1602_Number(minute_bit_pos,minute%10);
 249   1        LCD1602_Number(hour_ten_pos,hour/10);
 250   1        LCD1602_Number(hour_bit_pos,hour%10);
 251   1        
 252   1        Lcd1602_Custom_Char(1,4,6,lcd1602Table6);
 253   1        Lcd1602_Custom_Char(1,13,6,lcd1602Table6);
 254   1        Lcd1602_Custom_Char(2,4,6,lcd1602Table6);
 255   1        Lcd1602_Custom_Char(2,13,6,lcd1602Table6);
 256   1        
 257   1        if(point){
 258   2          Lcd1602_Custom_Char(1,8,4,lcd1602Table4);
 259   2          Lcd1602_Custom_Char(2,9,5,lcd1602Table5);
 260   2          Lcd1602_Custom_Char(1,9,6,lcd1602Table6);
 261   2          Lcd1602_Custom_Char(2,8,6,lcd1602Table6);
 262   2        }else{
 263   2          Lcd1602_Custom_Char(1,8,6,lcd1602Table6);
 264   2          Lcd1602_Custom_Char(2,9,6,lcd1602Table6);
 265   2          Lcd1602_Custom_Char(1,9,5,lcd1602Table5);
 266   2          Lcd1602_Custom_Char(2,8,4,lcd1602Table4);
 267   2        }
 268   1      }
 269          
 270          /******************************************************************************/
 271          // LCD1602日期/时间显示函数
 272          // 函数名称：LCD1602_DateTime_Update
 273          // 输入参数：无
 274          // 输出参数：无 
 275          // 函数功能：LCD1602显示日期和时间
 276          /******************************************************************************/
 277          void LCD1602_DateTime_Update(void)
 278          { 
 279   1        Lcd1602_Show_String(1,1,"   ");
 280   1        Lcd1602_Show_String(2,1,"    ");
 281   1        Lcd1602_Show_String(1,14,"   ");
 282   1        Lcd1602_Show_String(2,13,"    ");
 283   1        Lcd1602_Show_String(1,4,DateTable);
 284   1        Lcd1602_Show_String(2,5,TimeTable);
 285   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1496    ----
   CONSTANT SIZE    =     65    ----
   XDATA SIZE       =     13    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
